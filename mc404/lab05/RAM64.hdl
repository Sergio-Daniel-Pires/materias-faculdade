// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    	DMux8Way(in=load,sel=address[3..5],a=a1,b=a2,c=a3,d=a4,e=a5,f=a6,g=a7,h=a8);
	RAM8(in=in,load=a1,address=address[0..2],out=oa1);
	RAM8(in=in,load=a2,address=address[0..2],out=oa2);
	RAM8(in=in,load=a3,address=address[0..2],out=oa3);
	RAM8(in=in,load=a4,address=address[0..2],out=oa4);
	RAM8(in=in,load=a5,address=address[0..2],out=oa5);
	RAM8(in=in,load=a6,address=address[0..2],out=oa6);
	RAM8(in=in,load=a7,address=address[0..2],out=oa7);
	RAM8(in=in,load=a8,address=address[0..2],out=oa8);
	Mux8Way16(a=oa1,b=oa2,c=oa3,d=oa4,e=oa5,f=oa6,g=oa7,h=oa8,sel=address[3..5],out=out);
}
